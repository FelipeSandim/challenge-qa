// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace QA_Challenge.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CadastroDeUsuarioFeature : object, Xunit.IClassFixture<CadastroDeUsuarioFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Cadastro de Usuário", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Cadastro.feature"
#line hidden
        
        public CadastroDeUsuarioFeature(CadastroDeUsuarioFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="01 - Cadastro com nível de ensino Graduação")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro de Usuário")]
        [Xunit.TraitAttribute("Description", "01 - Cadastro com nível de ensino Graduação")]
        [Xunit.TraitAttribute("Category", "Cadastro")]
        public async System.Threading.Tasks.Task _01_CadastroComNivelDeEnsinoGraduacao()
        {
            string[] tagsOfScenario = new string[] {
                    "Cadastro"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01 - Cadastro com nível de ensino Graduação", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
  await testRunner.GivenAsync("que o usuário acessa a página de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
  await testRunner.WhenAsync("o usuário seleciona o nível de ensino \"graduação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
  await testRunner.AndAsync("o usuário seleciona o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
  await testRunner.AndAsync("o usuário preenche o formulário de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
  await testRunner.AndAsync("o sistema faz login com usuário \"candidato\" e senha \"subscription\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
  await testRunner.ThenAsync("o sistema deve exibir a mensagem \"Bem-vindo, Candidato!\" na tela inicial", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="01 - Cadastro com nível de ensino Pós Graduação")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro de Usuário")]
        [Xunit.TraitAttribute("Description", "01 - Cadastro com nível de ensino Pós Graduação")]
        [Xunit.TraitAttribute("Category", "Cadastro")]
        public async System.Threading.Tasks.Task _01_CadastroComNivelDeEnsinoPosGraduacao()
        {
            string[] tagsOfScenario = new string[] {
                    "Cadastro"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01 - Cadastro com nível de ensino Pós Graduação", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
  await testRunner.GivenAsync("que o usuário acessa a página de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 18
  await testRunner.WhenAsync("o usuário seleciona o nível de ensino \"pós-graduação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
  await testRunner.AndAsync("o usuário seleciona o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
  await testRunner.AndAsync("o usuário preenche o formulário de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
  await testRunner.AndAsync("o sistema faz login com usuário \"candidato\" e senha \"subscription\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
  await testRunner.ThenAsync("o sistema deve exibir a mensagem \"Bem-vindo, Candidato!\" na tela inicial", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Login com usuario incorreto")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro de Usuário")]
        [Xunit.TraitAttribute("Description", "Login com usuario incorreto")]
        [Xunit.TraitAttribute("Category", "LoginComUsuarioIncorreto")]
        public async System.Threading.Tasks.Task LoginComUsuarioIncorreto()
        {
            string[] tagsOfScenario = new string[] {
                    "LoginComUsuarioIncorreto"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login com usuario incorreto", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
  await testRunner.GivenAsync("que o usuário acessa a página de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
  await testRunner.WhenAsync("o usuário seleciona o nível de ensino \"graduação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
  await testRunner.AndAsync("o usuário seleciona o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
  await testRunner.AndAsync("o usuário preenche o formulário de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
  await testRunner.AndAsync("o sistema faz login com usuário \"Teste\" e senha \"subscription\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
  await testRunner.ThenAsync("o sistema deve exibir a mensagem de erro de usuário \"Usuário inválido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Login com senha incorreta")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro de Usuário")]
        [Xunit.TraitAttribute("Description", "Login com senha incorreta")]
        [Xunit.TraitAttribute("Category", "LoginComSenhaIncorreta")]
        public async System.Threading.Tasks.Task LoginComSenhaIncorreta()
        {
            string[] tagsOfScenario = new string[] {
                    "LoginComSenhaIncorreta"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login com senha incorreta", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
  await testRunner.GivenAsync("que o usuário acessa a página de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
  await testRunner.WhenAsync("o usuário seleciona o nível de ensino \"graduação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
  await testRunner.AndAsync("o usuário seleciona o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
  await testRunner.AndAsync("o usuário preenche o formulário de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
  await testRunner.AndAsync("o sistema faz login com usuário \"candidato\" e senha \"Teste\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
  await testRunner.ThenAsync("o sistema deve exibir a mensagem de erro de senha \"Senha inválida\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validação de campos obrigatórios vazios")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro de Usuário")]
        [Xunit.TraitAttribute("Description", "Validação de campos obrigatórios vazios")]
        [Xunit.TraitAttribute("Category", "ValidacaoCamposObrigatorios")]
        public async System.Threading.Tasks.Task ValidacaoDeCamposObrigatoriosVazios()
        {
            string[] tagsOfScenario = new string[] {
                    "ValidacaoCamposObrigatorios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validação de campos obrigatórios vazios", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 53
  await testRunner.GivenAsync("que o usuário acessa a página de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
  await testRunner.WhenAsync("o usuário seleciona o nível de ensino \"graduação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
  await testRunner.AndAsync("o usuário seleciona o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
  await testRunner.AndAsync("o usuário clica no botão avançar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "mensagens"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
                table1.AddRow(new string[] {
                            "Campo obrigatório"});
#line 58
  await testRunner.ThenAsync("o sistema deve exibir as seguintes mensagens de erro:", ((string)(null)), table1, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CadastroDeUsuarioFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CadastroDeUsuarioFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
